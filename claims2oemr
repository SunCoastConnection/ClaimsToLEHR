#!/usr/bin/env php
<?php

namespace SunCoastConnection\ClaimsToOEMR;

use \ErrorException;
use \SunCoastConnection\ClaimsToOEMR\Document\Options;
use \SunCoastConnection\ClaimsToOEMR\Document\Raw;
use \SunCoastConnection\ClaimsToOEMR\Store\Database;
use \SunCoastConnection\ClaimsToOEMR\X12N837;
use \SunCoastConnection\ClaimsToOEMR\X12N837\Cache;
use \Symfony\Component\Finder\Finder;


set_error_handler(__NAMESPACE__.'\exceptions_error_handler');

echo 'Setting up autoloading...'.PHP_EOL;

//** LOAD AUTOLOADER **//
$autoload = include(__DIR__.'/vendor/autoload.php');

if($autoload == false) {
	is_dir(dirname($autoloadPath)) || exitError(
		'Application has not been installed correctly.'.PHP_EOL.
			'Navigate to: '.__DIR__.PHP_EOL.
			'Run: composer install --no-dev'.PHP_EOL,
		1
	);

	file_exists($autoloadPath) || exitError(
		'Autoload component is missing: '.$autoloadPath.PHP_EOL,
		1
	);

	is_readable($autoloadPath) || exitError(
		'Autoload component is not readable: '.$autoloadPath.PHP_EOL,
		1
	);
}

echo 'Loading configurations...'.PHP_EOL;

//** GET CONFIGURATION OPTIONS **//
$options = Options::getInstance(require_once(__DIR__.'/config/app.php'));


$cmd = array_shift($argv);
$cmdOption = array_shift($argv);

switch($cmdOption) {
	case 'migrate':
		setupStore($options);
		c2eMigrate($options);
		break;

	case 'store-count':
		setupStore($options);
		c2eStoreCount($options);
		break;

	case 'parse':
		setupStore($options);
		c2eParse($options);
		break;

	default:
		exitError('Unknown option: '.$cmdOption, 1);
		break;
}

function exceptions_error_handler($severity, $message, $filename, $lineno) {
	if(error_reporting() !== 0 && (error_reporting() & $severity)) {
		throw new ErrorException($message, 0, $severity, $filename, $lineno);
	}
}

function exitError($message, $errorCode = 0) {
	echo $message;
	exit($errorCode);
}

function getStoreConnection($options, $connection = null) {
	if(is_null($connection)) {
		$connection = $options->get('Store.default', 'memory');
	}

	return $options->get('Store.connections.'.$connection);
}

function setupStore($options) {
	$connection = getStoreConnection($options);

	if($connection['driver'] === 'sqlite' && !file_exists($connection['database'])) {
		touch($connection['database']) || exitError(
			'SQLite database missing and can not be created: '.$connection['database'].PHP_EOL,
			1
		);
	}

	$options->set('App.store', Database::getInstance($options));
}

function c2eMigrate($options) {
	include(__DIR__.'/database/migrate.php');
}

function c2eStoreCount($options) {
	echo 'Store record counts:'.PHP_EOL.PHP_EOL;

	$options->get('App.store')->printTableCounts();

	echo PHP_EOL;
}

function c2eParse($options) {
	$inboxPath		= $options->get('Inbox.path');
	$inboxPattern	= $options->get('Inbox.pattern');

	$finder = new Finder;
	$finder->files()
		->in($inboxPath)
		->name($inboxPattern)
		->sortByName();

	if($options->get('Inbox.recursive') == false) {
		$finder->depth('== 0');
	}

	c2eStoreCount($options);

	echo 'Found '.$finder->count().' file(s) in directory: '.realpath($inboxPath).PHP_EOL.PHP_EOL;

	foreach($finder as $file) {
		echo " - Filename:\t\t".$file->getRealpath().PHP_EOL;
		echo " - Filesize:\t\t".$file->getSize().PHP_EOL;

		c2eClaimLoad($options, $file);
	}
}

function c2eClaimLoad($options, $file) {
	$raw = Raw::getInstance($options);
	$raw->parse($file->getContents());

	$document = X12N837::getInstance($options);
	$document->parse($raw);

	c2eClaimCache($options, $document);
}

function c2eClaimCache($options, $document) {
	$cache = Cache::getInstance($options->get('App.store'));

	$cache->processDocument($document);

	c2eStoreCount($options);
}